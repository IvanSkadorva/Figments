/* tslint:disable */
/* eslint-disable */
/**
 * FP Request service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    StreamRequest,
    StreamRequestFromJSON,
    StreamRequestToJSON,
    StreamChannel,
    StreamChannelFromJSON,
    StreamChannelToJSON,
    StreamType,
    StreamTypeFromJSON,
    StreamTypeToJSON,
} from '../models';

export interface ListRequestsRequest {
    ChannelId?: string;
    startTime?: string;
    endTime?: string;
    page?: number;
}

export interface ListChannelsRequest {
    Stream?: string;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * List of Stream types to Request
     */
    async listRequestsRaw(requestParameters: ListRequestsRequest): Promise<runtime.ApiResponse<Array<StreamRequest>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ChannelId !== undefined) {
            queryParameters['ChannelId'] = requestParameters.ChannelId;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Stream/Requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StreamRequestFromJSON));
    }

    /**
     * List of Stream types to Request
     */
    async listRequests(requestParameters: ListRequestsRequest): Promise<Array<StreamRequest>> {
        const response = await this.listRequestsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List of Stream cafe and Stream Channel places
     */
    async listChannelsRaw(requestParameters: ListChannelsRequest): Promise<runtime.ApiResponse<Array<StreamChannel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.Stream !== undefined) {
            queryParameters['Stream'] = requestParameters.Stream;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Stream/Channels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StreamChannelFromJSON));
    }

    /**
     * List of Stream cafe and Stream Channel places
     */
    async listChannels(requestParameters: ListChannelsRequest): Promise<Array<StreamChannel>> {
        const response = await this.listChannelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List of Stream types to Request
     */
    async listStreamTypesRaw(): Promise<runtime.ApiResponse<Array<StreamType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Stream/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StreamTypeFromJSON));
    }

    /**
     * List of Stream types to Request
     */
    async listStreamTypes(): Promise<Array<StreamType>> {
        const response = await this.listStreamTypesRaw();
        return await response.value();
    }

}
